const TelegramBot = require('node-telegram-bot-api');
const fs = require("fs");
const config = JSON.parse(fs.readFileSync("./config.json"));
const bot = new TelegramBot(config.token, {polling: true});
const axios = require("axios");
const httpsProxyAgent = require('https-proxy-agent');
const sleep = ms => new Promise(r => setTimeout(r, ms));
const scriptstart = Date.now();
async function check(code) {
    for(let i = 0; config.proxy.length > i; i++) {
        const httpsAgent = new httpsProxyAgent(config.proxy[i]);
        let ret = 0;
        let data = await axios.get("https://discordapp.com/api/v9/entitlements/gift-codes/" + code, { httpsAgent }).catch(e => {
        if (!e.response) return;
        if (e.response.data.message == "Unknown Gift Code") ret = 1; 
        });
        if (ret == 1) return;
        if (data) {
            if (data.data) {
                if (data.data.uses == 0) {
                    return {
                        type: data.data.store_listing.sku.name,
                        gift: "https://discord.gift/" + data.data.code
                    };
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    }
}
bot.on('message', async (msg) => {
    if(scriptstart+1000 > Date.now()) return;
    let users = JSON.parse(fs.readFileSync("./users.json"));
    if (msg.text == "/start") {
        if (!users[msg.chat.id.toString()]) {
            users[msg.chat.id.toString()] = {
                id: msg.chat.id,
                username: msg.from.first_name,
                balance: 0,
                sold: 0,
                check: 0,
                withdrawn: 0,
                nitrosold: [],
                wait: {},
                with_data: {}
            };
        }
        bot.sendMessage(msg.chat.id, "–ë–æ—Ç –ø–æ —Å–∫—É–ø–∫–µ Discord Nitro", {
            reply_markup: JSON.stringify({
                inline_keyboard: config.admins.find(e => e == msg.chat.id) ? [
                    [{ text: 'üöÄ –ü—Ä–æ–¥–∞—Ç—å –≥–∏—Ñ—Ç—ã', callback_data: 'sell' }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }, { text: 'üìÑ FAQ', callback_data: 'faq' }],
                    [{ text: 'ü§ñ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                ] : [
                    [{ text: 'üöÄ –ü—Ä–æ–¥–∞—Ç—å –≥–∏—Ñ—Ç—ã', callback_data: 'sell' }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }, { text: 'üìÑ FAQ', callback_data: 'faq' }]
                ]
            })
        })
    } else {
        if (users[msg.chat.id.toString()].wait.withdrawn) {
            const sum = parseFloat(msg.text.replace(/\D/g, ''));
            if (sum > users[msg.chat.id.toString()].balance) {
                await bot.deleteMessage(msg.chat.id, msg.message_id);
                return await bot.editMessageText("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>" + sum + " —Ä—É–±.</b> –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞!\n–ü—Ä–∏—á–∏–Ω–∞: <i>–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–º–µ—é—â–µ–≥–æ—Å—è –±–∞–ª–∞–Ω—Å–∞</i>", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.withdrawn,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                        ]
                    })
                });
            }
            let withdrawn = JSON.parse(fs.readFileSync("./withdrawn.json"));
            withdrawn.push({
                wid: Date.now().toString().split('').slice(7, 13).join(""),
                id: msg.chat.id,
                sum: sum,
                status: "created",
                system: users[msg.chat.id.toString()].with_data.system,
                number: users[msg.chat.id.toString()].with_data.number
            });
            fs.writeFileSync("./withdrawn.json", JSON.stringify(withdrawn));
            await bot.editMessageText("üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>" + sum + " —Ä—É–±.</b> —Å–æ–∑–¥–∞–Ω–∞!", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.withdrawn,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                    ]
                })
            });
            await bot.deleteMessage(msg.chat.id, msg.message_id);
            users[msg.chat.id.toString()].balance -= sum;
            users[msg.chat.id.toString()].wait.withdrawn = null;
        } else if (users[msg.chat.id.toString()].wait.with_data) {
            const data = msg.text;
            users[msg.chat.id.toString()].with_data.number = data;
            await bot.editMessageText("üí∞ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.with_data,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                    ]
                })
            });
            await bot.deleteMessage(msg.chat.id, msg.message_id);
            users[msg.chat.id.toString()].wait.with_data = null;
        } else if (users[msg.chat.id.toString()].wait.sellgift) {
            const data = msg.text;
            let allgifts = data.split("\n");
            let gifts = [...new Set(allgifts)];
            let dubles = allgifts.length - gifts.length;
            await bot.deleteMessage(msg.chat.id, msg.message_id);
            await bot.editMessageText("‚úÖ –ì–∏—Ñ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–æ <b>"+ dubles +" –¥—É–±–ª–µ–π</b>!", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.sellgift,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'sell' }],
                    ]
                })
            });
            let checkedgifts = [];
            let giftcount = JSON.parse(fs.readFileSync("./giftcount.json"));
            let price = 0;
            let giftdb = JSON.parse(fs.readFileSync("./gifts.json"));
            for (let i = 0; gifts.length > i; i++) {
                let checked = await check(gifts[i].split('/')[3]);
                if (checked) {
                    if (giftdb.find(e => e.gift == checked.gift)) {
                        
                    } else if (checked.type == "Nitro Basic") {
                        if (giftcount.basic != 0) {
                            checked.sum = config.giftprice.basicm;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.basicm
                            giftcount.basic -= 1;
                        }
                    } else if (checked.type == "Nitro") {
                        if (giftcount.monthly != 0) {
                            checked.sum = config.giftprice.fullm;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.fullm
                            giftcount.monthly -= 1;
                        }
                    } else if (checked.type == "Nitro Classic") {
                        if (giftcount.classic != 0) {
                            checked.sum = config.giftprice.classicm;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.classicm
                            giftcount.classic -= 1;
                        }
                    } else if (checked.type == "Nitro Year") {
                        if (giftcount.classic != 0) {
                            checked.sum = config.giftprice.fully;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.fully
                            giftcount.yearly -= 1;
                        }
                    } else if (checked.type == "Nitro Classic Year") {
                        if (giftcount.classic != 0) {
                            checked.sum = config.giftprice.classicy;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.classicy
                            giftcount.classicyearly -= 1;
                        }
                    } else if (checked.type == "Nitro Basic Year") {
                        if (giftcount.classic != 0) {
                            checked.sum = config.giftprice.basicy;
                            checked.gid = Date.now().toString().split('').slice(7, 13).join("");
                            checkedgifts.push(checked);
                            price += config.giftprice.basicy
                            giftcount.basicyearly -= 1;
                        }
                    }
                }
            }
            fs.writeFileSync("./giftcount.json", JSON.stringify(giftcount))
            if (checkedgifts.length == 0) {
                await bot.editMessageText("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –Ω–µ—Ç <b>–Ω–∏–æ–¥–Ω–æ–≥–æ –≥–∏—Ñ—Ç–∞</b> —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö <b>—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∫—É–ø–∫–µ</b>!", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.sellgift,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'sell' }],
                        ]
                    })
                });
                return users[msg.chat.id.toString()].wait.sellgift = null;
            }
            for(let i = 0; i < checkedgifts.length; i++) {
                giftdb.push({
                    type: checkedgifts[i].type,
                    gift: checkedgifts[i].gift,
                    sum: checkedgifts[i].sum,
                    gid: checkedgifts[i].gid,
                    id: msg.chat.id,
                    status: "sended"
                });
            }
            for(let i = 0; i < config.admins.length; i++) {
                bot.sendMessage(config.admins[i], "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–∏—Ñ—Ç—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>" + checkedgifts.length + " —à—Ç</b>, –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É <b>" + price + " —Ä—É–±.</b>", { parse_mode: "HTML" })
            }
            
            await bot.editMessageText("‚úÖ –£—Å–ø–µ—à–Ω–æ\n–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ <b>"+ checkedgifts.length +" –Ω–∏—Ç—Ä–æ</b> –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n<i>–í —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>"+ price +" —Ä—É–±.</b></i>", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.sellgift,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'sell' }],
                    ]
                })
            });
            fs.writeFileSync("./gifts.json", JSON.stringify(giftdb))
            users[msg.chat.id.toString()].check += 1;
            users[msg.chat.id.toString()].wait.sellgift = null;
        } else if (users[msg.chat.id.toString()].wait.find) {
            const data = msg.text;
            if (!users[data]) {
                return bot.editMessageText("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.find,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                        ]
                    })
                });
            } 
            let user = users[data];
            users[msg.chat.id.toString()].wait.userchatid = data;
            bot.editMessageText("<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\nüë§ –ê–π–¥–∏: <code>"+ msg.chat.id +
                "</code>\nü™ô –ë–∞–ª–∞–Ω—Å: <b>" + user.balance + 
                " —Ä—É–±.</b>\nüõí –ü—Ä–æ–¥–∞–Ω–æ: <b>"+ user.sold +
                " —à—Ç.</b>\nüí∏ –í—ã–≤–µ–¥–µ–Ω–æ: <b>" + user.withdrawn + 
                " —Ä—É–±.</b>\nüöÄ –ù–∞ –ø—Ä–æ–¥–∞–∂–µ: <b>" + user.check + 
                " —à—Ç.</b>\n\n<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>\nü§ñ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>" + (user.with_data.system ? user.with_data.system : "–ù–µ —É–∫–∞–∑–∞–Ω–∞") + 
                "</b>\nüì± –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: <b>" + (user.with_data.number ? user.with_data.number : "–ù–µ —É–∫–∞–∑–∞–Ω") + "</b>", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.find,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: 'üí∞ –°–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'changebalance' }],
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                    ]
                })
            });
            users[msg.chat.id.toString()].wait.find = null;
        } else if (users[msg.chat.id.toString()].wait.skup) {
            const data = msg.text;
            const code = data.split(':')[0];
            const count = parseInt(data.split(':')[1]);
            if (code == "FullMonth" || code == "BasicMonth" || code == "ClassicMonth" || code == "FullYearly" || code == "BasicYearly" || code == "ClassicYearly") {
                let giftcount = JSON.parse(fs.readFileSync("./giftcount.json"));
                if (code == "FullMonth") {
                    giftcount.monthly = count;
                } else if (code == "ClassicMonth") {
                    giftcount.classic = count;
                } else if (code == "BasicMonth") {
                    giftcount.basic = count;
                } else if (code == "FullYearly") {
                    giftcount.yearly = count;
                } else if (code == "ClassicYearly") {
                    giftcount.classicyearly = count;
                } else if (code == "BasicYearly") {
                    giftcount.basicyearly = count;
                }
                fs.writeFileSync("./giftcount.json", JSON.stringify(giftcount))
                bot.editMessageText("üõí –¢–æ–≤–∞—Ä <code>"+ code +"</code> –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>"+ count +" —à—Ç.</b>", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.skup,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                        ]
                    })
                });
                await bot.deleteMessage(msg.chat.id, msg.message_id);
            } else {
                bot.editMessageText("üõí –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è <b>—Å–∫—É–ø–∞ –ø–æ –∫–æ–¥—É</b>", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.skup,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                        ]
                    })
                });
            }
        } else if (users[msg.chat.id.toString()].wait.senduser) {
            const data = msg.text;
            const user = data.split("\n")[0];
            const message = data.split("\n").slice(1, data.split("\n").length).join("\n");
            await bot.deleteMessage(msg.chat.id, msg.message_id);
            try {
                await bot.sendMessage(user, message, { reply_markup: { inline_keyboard: [[{text: "–≠—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!", callback_data: "itsadm"}]] } });
                await bot.editMessageText("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.senduser,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                        ]
                    })
                });
            } catch (err) {
                await bot.editMessageText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n<i>–û—à–∏–±–∫–∞: <b>"+ err +"</b></i>", {
                    chat_id: msg.chat.id, 
                    message_id: users[msg.chat.id.toString()].wait.senduser,
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                        ]
                    })
                });
            }
        } else if (users[msg.chat.id.toString()].wait.sendall) {
            const message = msg.text;
            let arr = [];
            const keys = Object.keys(users);
            for (let i = 0; i < keys.length; i++) {
                arr.push(users[keys[i.toString()]]);
            }
            await bot.deleteMessage(msg.chat.id, msg.message_id);
            let s = 1;
            for (let i = 0; i < arr.length; i++) {
                try {
                    await bot.sendMessage(arr[i].id, message, { reply_markup: { inline_keyboard: [[{text: "–≠—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞!", callback_data: "itsaads"}]] } });
                    await bot.editMessageText("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ("+ s +"/"+ arr.length +")", {
                        chat_id: msg.chat.id, 
                        message_id: users[msg.chat.id.toString()].wait.sendall,
                        parse_mode: "HTML",
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                            ]
                        })
                    });
                    s++;
                } catch (err) {}
            }
            
        } else if (users[msg.chat.id.toString()].wait.changebalance) {
            const sum = parseFloat(msg.text.replace(/\D/g, ''));
            users[users[msg.chat.id.toString()].wait.userchatid].balance = sum;
            await bot.editMessageText("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", {
                chat_id: msg.chat.id, 
                message_id: users[msg.chat.id.toString()].wait.changebalance,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                    ]
                })
            });
            
            
        }
    }
    fs.writeFileSync("./users.json", JSON.stringify(users));
});
bot.on("polling_error", console.log);
bot.on('callback_query', async (action) => {
    if(scriptstart+1000 > Date.now()) return;
    let users = JSON.parse(fs.readFileSync("./users.json"));
    if (action.data == "profile") {
        users[action.message.chat.id.toString()].wait = {};
        let user = users[action.message.chat.id.toString()];
        bot.editMessageText("<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ</b>\n\nüë§ –ê–π–¥–∏: <code>"+ action.message.chat.id +
            "</code>\nü™ô –ë–∞–ª–∞–Ω—Å: <b>" + user.balance + 
            " —Ä—É–±.</b>\nüõí –ü—Ä–æ–¥–∞–Ω–æ: <b>"+ user.sold +
            " —à—Ç.</b>\nüí∏ –í—ã–≤–µ–¥–µ–Ω–æ: <b>" + user.withdrawn + 
            " —Ä—É–±.</b>\nüöÄ –ù–∞ –ø—Ä–æ–¥–∞–∂–µ: <b>" + user.check + 
            " —à—Ç.</b>\n\n<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>\nü§ñ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>" + (user.with_data.system ? user.with_data.system : "–ù–µ —É–∫–∞–∑–∞–Ω–∞") + 
            "</b>\nüì± –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: <b>" + (user.with_data.number ? user.with_data.number : "–ù–µ —É–∫–∞–∑–∞–Ω") + "</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'withdrawn' }, { text: 'üè¶ –í–∞—à–∏ –≤—ã–≤–æ–¥—ã', callback_data: 'withdrawns' }],
                    [{ text: 'üí∏ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞', callback_data: 'wallet' }],
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main' }],
                ]
            })
        });
    } else if (action.data == "main") {
        bot.editMessageText("–ë–æ—Ç –ø–æ —Å–∫—É–ø–∫–µ Discord Nitro", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            reply_markup: JSON.stringify({
                inline_keyboard: config.admins.find(e => e == action.message.chat.id) ? [
                    [{ text: 'üöÄ –ü—Ä–æ–¥–∞—Ç—å –≥–∏—Ñ—Ç—ã', callback_data: 'sell' }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }, { text: 'üìÑ FAQ', callback_data: 'faq' }],
                    [{ text: 'ü§ñ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                ] : [
                    [{ text: 'üöÄ –ü—Ä–æ–¥–∞—Ç—å –≥–∏—Ñ—Ç—ã', callback_data: 'sell' }],
                    [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }, { text: 'üìÑ FAQ', callback_data: 'faq' }]
                ]
            })
        })
    } else if (action.data == "withdrawn") {
        let user = users[action.message.chat.id.toString()];
        if (user.balance < 10) {
            return bot.editMessageText("–í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç <b>" + config.min + " —Ä—É–±.</b>", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                    ]
                })
            });
        } else if (!user.with_data.number) {
            return bot.editMessageText("–í—ã –Ω–µ –≤–≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: 'üí∏ –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞', callback_data: 'wallet' }],
                        [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                    ]
                })
            });
        }
        bot.editMessageText("ü§ë –£–∫–∞–∂–∏—Ç–µ <b>—Å—É–º–º—É</b> –≤—ã–≤–æ–¥–∞", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                ]
            })
        });
        users[action.message.chat.id.toString()].wait.withdrawn = action.message.message_id;
    } else if (action.data == "wallet") {
        bot.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ <b>–Ω–∏–∂–µ</b>!", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–ö–∞—Ä—Ç–∞', callback_data: 'card' }, { text: 'Qiwi', callback_data: 'qiwi' }, { text: 'Lava', callback_data: 'lava' }],
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "card") {
        users[action.message.chat.id.toString()].with_data.system = "–ö–∞—Ä—Ç–∞";
        users[action.message.chat.id.toString()].wait.with_data = action.message.message_id;
        bot.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π <b>–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã</b>!", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "qiwi") {
        users[action.message.chat.id.toString()].with_data.system = "Qiwi";
        users[action.message.chat.id.toString()].wait.with_data = action.message.message_id;
        bot.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –Ω–æ–º–µ—Ä <b>–∫–∏–≤–∏</b>!", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "lava") {
        users[action.message.chat.id.toString()].with_data.system = "Lava";
        users[action.message.chat.id.toString()].wait.with_data = action.message.message_id;
        bot.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∏–∂–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ <b>Lava –∫–æ—à–µ–ª—å–∫–∞</b>!", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "withdrawns") {
        users[action.message.chat.id.toString()].wait.withdrawn_list = 0;
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].id == action.message.chat.id) {
                all.push(withdrawns[i]);
            }
        }
        all.reverse();
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –í—ã –µ—â–µ –Ω–µ –≤—ã–≤–æ–¥–∏–ª–∏ –¥–µ–Ω—å–≥–∏ —Å –±–æ—Ç–∞!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    ]
                })
            });
        }
        let my = all.slice(users[action.message.chat.id.toString()].wait.withdrawn_list, users[action.message.chat.id.toString()].wait.withdrawn_list+5);
        let text = [];
        for(let i = 0; my.length > i; i++) {
            text.push("ü™™ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #"+ i +"</b>\nüí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: <b>" + my[i].sum + " —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (my[i].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (my[i].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>")
        }
        bot.editMessageText(text.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        (users[action.message.chat.id.toString()].wait.withdrawn_list != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.withdrawn_list+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' })],
                    [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "back_withdrawn") {
        users[action.message.chat.id.toString()].wait.withdrawn_list -= 1;
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].id == action.message.chat.id) {
                all.push(withdrawns[i]);
            }
        }
        all.reverse();
        let my = all.slice(users[action.message.chat.id.toString()].wait.withdrawn_list*5, users[action.message.chat.id.toString()].wait.withdrawn_list*5+5);let text = [];
        for(let i = 0; my.length > i; i++) {
            text.push("ü™™ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #"+ (i+(5*users[action.message.chat.id.toString()].wait.withdrawn_list)) +"</b>\nüí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: <b>" + my[i].sum + " —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (my[i].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (my[i].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>")
        }
        bot.editMessageText(text.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        (users[action.message.chat.id.toString()].wait.withdrawn_list != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.withdrawn_list+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' })],
                    [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "next_withdrawn") {
        users[action.message.chat.id.toString()].wait.withdrawn_list += 1;
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].id == action.message.chat.id) {
                all.push(withdrawns[i]);
            }
        }
        all.reverse();
        let my = all.slice(users[action.message.chat.id.toString()].wait.withdrawn_list*5, users[action.message.chat.id.toString()].wait.withdrawn_list*5+5);
        let text = [];
        for(let i = 0; my.length > i; i++) {
            text.push("ü™™ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #"+ (i+(5*users[action.message.chat.id.toString()].wait.withdrawn_list)) +"</b>\nüí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: <b>" + my[i].sum + " —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (my[i].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (my[i].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>")
        }
        bot.editMessageText(text.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        (users[action.message.chat.id.toString()].wait.withdrawn_list != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.withdrawn_list*5+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_withdrawn' } : { text: '‚†Ä', callback_data: 'fsgfas' })],
                    [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                ]
            })
        });
    } else if (action.data == "sell") {
        users[action.message.chat.id.toString()].wait = {};
        let nitro = JSON.parse(fs.readFileSync("./giftcount.json"))
        bot.editMessageText("üõí <b>–î–æ—Å—Ç—É–ø–Ω–æ –∫ –ø—Ä–æ–¥–∞–∂–µ:</b>\n\nNitro Monthly - <b>" + nitro.monthly + " —à—Ç.</b> | <b>"+ config.giftprice.fullm +" —Ä—É–±.</b>\nNitro Classic Monthly - <b>" + nitro.classic + " —à—Ç.</b> | <b>"+ config.giftprice.classicm +" —Ä—É–±.</b>\nNitro Basic Monthly - <b>" + nitro.basic + " —à—Ç.</b> | <b>"+ config.giftprice.basicm +" —Ä—É–±.</b>\n\nNitro Yearly - <b>" + nitro.yearly + " —à—Ç.</b> | <b>"+ config.giftprice.fully +" —Ä—É–±.</b>\nNitro Classic Yearly - <b>" + nitro.classicyearly + " —à—Ç.</b> | <b>"+ config.giftprice.classicy +" —Ä—É–±.</b>\nNitro Basic Yearly - <b>" + nitro.basicyearly + " —à—Ç.</b> | <b>"+ config.giftprice.basicy +" —Ä—É–±.</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: 'üöÄ –ü—Ä–æ–¥–∞—Ç—å', callback_data: 'sellgift' }],
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main' }],
                ]
            })
        });
    } else if (action.data == "sellgift") {
        users[action.message.chat.id.toString()].wait.sellgift = action.message.message_id;
        bot.editMessageText("–î–∞–±—ã –ø—Ä–æ–¥–∞—Ç—å –≥–∏—Ñ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö <b>—Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b> –ø–æ —Ç–∞–∫–æ–π <b>—Ñ–æ—Ä–º–µ</b>\n\nüöÄ <code>https://discord.gift/%{giftcode}</code>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'sell' }],
                ]
            })
        });
    } else if (action.data == "admin") {
        users[action.message.chat.id.toString()].wait = {};
        bot.editMessageText("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: 'üí∞ –í—ã–ø–ª–∞—Ç—ã', callback_data: 'check_withdrawn'}, 
                        { text: 'üöÄ –ì–∏—Ñ—Ç—ã', callback_data: 'check_gift' }
                    ],
                    [
                        { text: 'üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫—É–ø', callback_data: 'addskup' }, 
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
                    ],
                    [
                        { text: 'üë§ –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'find'}
                    ],
                    [
                        { text: 'üó£Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É', callback_data: 'senduser' }, 
                        { text: 'üë• –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º', callback_data: 'sendall' }
                    ],
                    [
                        { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main' }
                    ],
                ]
            })
        });
    } else if (action.data == "check_withdrawn") {
        users[action.message.chat.id.toString()].wait.admin_withdrawn_list = {
            page: 0,
            user: null,
        };
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].status == "created") {
                all.push(withdrawns[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }
        let my = all.slice(page, page+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].wid, callback_data: "WD" + my[i].wid});
            text1.push("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + my[i].wid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüí∏ –°—É–º–º–∞: <b>" + my[i].sum + " —Ä—É–±.</b>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_awithdrawn' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_awithdrawn' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
        
    } else if (action.data == "next_awithdrawn") {
        users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page += 1;
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].status == "created") {
                all.push(withdrawns[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }

        let my = all.slice(page*5, page*5+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].wid, callback_data: "WD" + my[i].wid});
            text1.push("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + my[i].wid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüí∏ –°—É–º–º–∞: <b>" + my[i].sum + " —Ä—É–±.</b>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_awithdrawn' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page*5+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_awithdrawn' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
        
    } else if (action.data == "back_awithdrawn") {
        users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page -= 1;
        const withdrawns = JSON.parse(fs.readFileSync("./withdrawn.json"));
        let all = [];
        for(let i = 0; withdrawns.length > i; i++) {
            if (withdrawns[i].status == "created") {
                all.push(withdrawns[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }

        let my = all.slice(page*5, page*5+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].wid, callback_data: "WD" + my[i].wid});
            text1.push("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + my[i].wid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüí∏ –°—É–º–º–∞: <b>" + my[i].sum + " —Ä—É–±.</b>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_awithdrawn' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_withdrawn_list.page*5+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_awithdrawn' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
        
    } else if (action.data.startsWith("WD")) {
        let withdrawns = JSON.parse(fs.readFileSync('./withdrawn.json'));
        let id;
        let wid = action.data.replace("WD", "");
        for (let i = 0; i < withdrawns.length; i++) {
            if (withdrawns[i].wid.toString() == wid) id = i;
        }
        users[action.message.chat.id.toString()].wait.admin_withdrawn_list.id = withdrawns[id].wid;
        let user = users[withdrawns[id].id.toString()];
        bot.editMessageText("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + wid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +"</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +"</code>\nüí∏ –°—É–º–º–∞: <b>"+ withdrawns[id].sum +" —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (withdrawns[id].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (withdrawns[id].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>\n\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\nü§ñ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>" + user.with_data.system + "</b>\nüì± –ù–æ–º–µ—Ä: <b>" + user.with_data.number + "</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '‚úÖ', callback_data: 'success' },
                        { text: '‚ùå', callback_data: 'cancel' }
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_withdrawn' }
                    ],
                ]
            })
        });

    } else if (action.data == "success") {
        let withdrawns = JSON.parse(fs.readFileSync('./withdrawn.json'));
        let id;
        for (let i = 0; i < withdrawns.length; i++) {
            if (withdrawns[i].wid == users[action.message.chat.id.toString()].wait.admin_withdrawn_list.id) { id = i; }
        }
        withdrawns[id].status = "success";
        bot.sendMessage(withdrawns[id].id, "‚úÖ –í—ã–ø–ª–∞—Ç–∞ #" + withdrawns[id].wid + " –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n<i>–°—É–º–º–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π –ø–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</i>", {parse_mode: "HTML"})
        users[withdrawns[id].id.toString()].withdrawn += withdrawns[id].sum;
        fs.writeFileSync("./withdrawn.json", JSON.stringify(withdrawns));
        let user = users[withdrawns[id].id.toString()];
        bot.editMessageText("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + withdrawns[id].wid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +"</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +"</code>\nüí∏ –°—É–º–º–∞: <b>"+ withdrawns[id].sum +" —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (withdrawns[id].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (withdrawns[id].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>\n\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\nü§ñ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>" + user.with_data.system + "</b>\nüì± –ù–æ–º–µ—Ä: <b>" + user.with_data.number + "</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_withdrawn' }
                    ],
                ]
            })
        });
    } else if (action.data == "cancel") {
        let withdrawns = JSON.parse(fs.readFileSync('./withdrawn.json'));
        let id;
        for (let i = 0; i < withdrawns.length; i++) {
            if (withdrawns[i].wid == users[action.message.chat.id.toString()].wait.admin_withdrawn_list.id) { id = i; }
        }
        withdrawns[id].status = "canceled";
        bot.sendMessage(withdrawns[id].id, "‚ùå –í—ã–ø–ª–∞—Ç–∞ #" + withdrawns[id].wid + " –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n<i>–ë–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω</i>", {parse_mode: "HTML"})
        users[action.message.chat.id.toString()].wait.admin_withdrawn_list.id = withdrawns[id].id;
        users[withdrawns[id].id.toString()].balance += withdrawns[id].sum
        fs.writeFileSync("./withdrawn.json", JSON.stringify(withdrawns));
        let user = users[withdrawns[id].id.toString()];
        bot.editMessageText("<b>üè¶ –ü–ª–∞—Ç–µ–∂ #" + withdrawns[id].wid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +"</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +"</code>\nüí∏ –°—É–º–º–∞: <b>"+ withdrawns[id].sum +" —Ä—É–±.</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (withdrawns[id].status == "created" ? "üïù –°–æ–∑–¥–∞–Ω" : (withdrawns[id].status == "success" ? "‚úÖ –í—ã–≤–µ–¥–µ–Ω–æ" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω")) + "</b>\n\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\nü§ñ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: <b>" + user.with_data.system + "</b>\nüì± –ù–æ–º–µ—Ä: <b>" + user.with_data.number + "</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_withdrawn' }
                    ],
                ]
            })
        });
    } else if (action.data == "check_gift") {
        users[action.message.chat.id.toString()].wait.admin_gift_list = {
            page: 0,
            user: null,
        };
        const gifts = JSON.parse(fs.readFileSync("./gifts.json"));
        let all = [];
        for(let i = 0; gifts.length > i; i++) {
            if (gifts[i].status == "sended") {
                all.push(gifts[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_gift_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –≥–∏—Ñ—Ç–æ–≤ –≤ –±–æ—Ç–µ!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }
        let my = all.slice(page, page+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].gid, callback_data: "GF" + my[i].gid});
            text1.push("<b>üè¶ –ì–∏—Ñ—Ç #" + my[i].gid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüöÄ –ì–∏—Ñ—Ç: <code>" + my[i].gift + "</code>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_gift' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_gift' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
    } else if (action.data == "back_gift") {
        users[action.message.chat.id.toString()].wait.admin_gift_list.page -= 1;
        const gifts = JSON.parse(fs.readFileSync("./gifts.json"));
        let all = [];
        for(let i = 0; gifts.length > i; i++) {
            if (gifts[i].status == "sended") {
                all.push(gifts[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_gift_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–∏—Ñ—Ç–æ–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }

        let my = all.slice(page*5, page*5+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].gid, callback_data: "GF" + my[i].gid});
            text1.push("<b>üè¶ –ì–∏—Ñ—Ç #" + my[i].gid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüöÄ –ì–∏—Ñ—Ç: <code>" + my[i].gift + "</code>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_gift' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page*5+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_gift' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
    } else if (action.data == "next_gift") {
        users[action.message.chat.id.toString()].wait.admin_gift_list.page += 1;
        const gifts = JSON.parse(fs.readFileSync("./gifts.json"));
        let all = [];
        for(let i = 0; gifts.length > i; i++) {
            if (gifts[i].status == "sended") {
                all.push(gifts[i]);
            }
        }
        let page = users[action.message.chat.id.toString()].wait.admin_gift_list.page;
        if (all.length == 0) {
            return bot.editMessageText("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–∏—Ñ—Ç–æ–≤!", {
                chat_id: action.message.chat.id, 
                message_id: action.message.message_id,
                parse_mode: "HTML",
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }],
                    ]
                })
            });
        }

        let my = all.slice(page*5, page*5+5);
        let text = [];
        let text1 = [];
        for(let i = 0; my.length > i; i++) {
            text.push({ text: my[i].gid, callback_data: "GF" + my[i].gid});
            text1.push("<b>üè¶ –ì–∏—Ñ—Ç #" + my[i].gid + "</b>\nüë§ ID: <code>" + my[i].id + "</code>\nüöÄ –ì–∏—Ñ—Ç: <code>" + my[i].gift + "</code>")
        }
        bot.editMessageText(text1.join("\n\n"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    text,
                    [
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page != 0 ? { text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'back_gift' } : { text: '', callback_data: 'fsgfas' }),
                        (users[action.message.chat.id.toString()].wait.admin_gift_list.page*5+5 <= all.length ? { text: '–í–ø–µ—Ä–µ–¥ ‚è©', callback_data: 'next_gift' } : { text: '', callback_data: 'fsgfas' })
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin' }
                    ],
                ]
            })
        });
    } else if (action.data.startsWith("GF")) {
        let gifts = JSON.parse(fs.readFileSync('./gifts.json'));
        let id;
        let gid = action.data.replace("GF", "");
        for (let i = 0; i < gifts.length; i++) {
            if (gifts[i].gid.toString() == gid) id = i;
        }
        console.log(id)
        users[action.message.chat.id.toString()].wait.admin_gift_list.id = gifts[id].gid;
        let user = users[gifts[id].id.toString()];
        console.log("Pon")
        let checker = await check(gifts[id].gift.replace("https://discord.gift/", ""));
        console.log("checker1")
        bot.editMessageText("<b>üè¶ –ì–∏—Ñ—Ç #" + gid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +
        "</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +
        "</code>\nüöÄ –ì–∏—Ñ—Ç: <b>"+ gifts[id].gift +
        "</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (gifts[id].status == "sended" ? "üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω" : gifts[id].status == "success" ? "‚úÖ –ü—Ä–∏–Ω—è—Ç" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω" ) + 
        "</b>\nüöÄ –ß–µ–∫–µ—Ä: " + (checker ? "‚úÖ" : "‚ùå"),
        {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '‚úÖ', callback_data: 'gsuccess' },
                        { text: '‚ùå', callback_data: 'gcancel' }
                    ],
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_gift' }
                    ],
                ]
            })
        });

    } else if (action.data == "gsuccess") {
        let gifts = JSON.parse(fs.readFileSync('./gifts.json'));
        let id;
        for (let i = 0; i < gifts.length; i++) {
            if (gifts[i].gid == users[action.message.chat.id.toString()].wait.admin_gift_list.id) { id = i; }
        }
        gifts[id].status = "success";
        bot.sendMessage(gifts[id].id, "‚úÖ –ì–∏—Ñ—Ç #" + gifts[id].gid + " –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n<i>–í–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ "+ gifts[id].sum +" —Ä—É–±.</i>", {parse_mode: "HTML"})
        users[gifts[id].id.toString()].balance += gifts[id].sum;
        users[gifts[id].id.toString()].sold += 1;
        users[gifts[id].id.toString()].check -= 1;
        fs.writeFileSync("./gifts.json", JSON.stringify(gifts));
        let user = users[gifts[id].id.toString()];
        let checker = await check(gifts[id].gift.replace("https://discord.gift/", ""))
        bot.editMessageText("<b>üè¶ –ì–∏—Ñ—Ç #" + gifts[id].gid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +
        "</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +
        "</code>\nüöÄ –ì–∏—Ñ—Ç: <b>"+ gifts[id].gift +
        "</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (gifts[id].status == "sended" ? "üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω" : gifts[id].status == "success" ? "‚úÖ –ü—Ä–∏–Ω—è—Ç" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω" ) + 
        "</b>\nüöÄ –ß–µ–∫–µ—Ä: " + (checker ? "‚úÖ" : "‚ùå"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_gift' }
                    ],
                ]
            })
        });
    } else if (action.data == "gcancel") {
        let gifts = JSON.parse(fs.readFileSync('./gifts.json'));
        let id;
        for (let i = 0; i < gifts.length; i++) {
            if (gifts[i].gid == users[action.message.chat.id.toString()].wait.admin_gift_list.id) { id = i; }
        }
        gifts[id].status = "cancelled";
        users[gifts[id].id.toString()].check -= 1;
        bot.sendMessage(gifts[id].id, "‚ùå –ì–∏—Ñ—Ç #" + gifts[id].gid + " –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ, –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º!</i>", {parse_mode: "HTML"})
        fs.writeFileSync("./gifts.json", JSON.stringify(gifts));
        let user = users[gifts[id].id.toString()];
        let checker = await check(gifts[id].gift.replace("https://discord.gift/", ""))
        bot.editMessageText("<b>üè¶ –ì–∏—Ñ—Ç #" + gifts[id].gid + "</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>"+ user.username +
        "</code>\nüë®üèª‚Äçüíª –ê–π–¥–∏: <code>"+ user.id +
        "</code>\nüöÄ –ì–∏—Ñ—Ç: <b>"+ gifts[id].gift +
        "</b>\nüö¶ –°—Ç–∞—Ç—É—Å: <b>" + (gifts[id].status == "sended" ? "üöÄ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω" : gifts[id].status == "success" ? "‚úÖ –ü—Ä–∏–Ω—è—Ç" : "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω" ) + 
        "</b>\nüöÄ –ß–µ–∫–µ—Ä: " + (checker ? "‚úÖ" : "‚ùå"), {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: '–û–±—Ä–∞—Ç–Ω–æ', callback_data: 'check_gift' }
                    ],
                ]
            })
        });
    } else if (action.data == "find") {
        users[action.message.chat.id.toString()].wait.find = action.message.message_id;
        bot.editMessageText("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "addskup") {
        users[action.message.chat.id.toString()].wait.skup = action.message.message_id;
        bot.editMessageText("üõí –î–∞–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–∫—É–ø –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<code>FullMonth:50</code>\n\n–ö–æ–¥—ã –Ω–∏—Ç—Ä–æ: <b>BasicMonth, ClassicMonth, FullMonth, BasicYearly, ClassicYearly, FullYearly</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "stats") {
        let arr = [];
        const keys = Object.keys(users);
        for (let i = 0; i < keys.length; i++) {
            arr.push(users[keys[i.toString()]]);
        }
        let stats = {
            users: 0,
            balance: 0,
            sold: 0,
            check: 0,
            withdrawn: 0
        };
        for (let i = 0; i < arr.length; i++) {
            stats.users += 1;
            stats.balance += arr[i].balance
            stats.sold += arr[i].sold
            stats.check += arr[i].check
            stats.withdrawn += arr[i].withdrawn
        }
        bot.editMessageText("üõí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>"+ stats.users +" —à—Ç.</b>\nüí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: <b>"+ stats.balance +" —Ä—É–±.</b>\nüõí –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–ª–∏: <b>"+ stats.sold +" —à—Ç.</b>\nüöÄ –ù–∏—Ç—Ä–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ: <b>"+ stats.check +" —à—Ç.</b>\nüí∏ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: <b>"+ stats.withdrawn +" —Ä—É–±.</b>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "senduser") {
        users[action.message.chat.id.toString()].wait.senduser = action.message.message_id;
        bot.editMessageText("üõí –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ</b>:\n\n<code>1234567890\n–û—á–µ–Ω—å –∫—Ä—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ø–∞–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã—à–µ</code>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "sendall") {
        users[action.message.chat.id.toString()].wait.sendall = action.message.message_id;
        bot.editMessageText("üõí –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞–ø–∏—à–∏—Ç–µ <b>–ø–æ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ</b>:\n\n<code>–û—á–µ–Ω—å –∫—Ä—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ø–∞–¥–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã—à–µ</code>", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "changebalance") {
        users[action.message.chat.id.toString()].wait.changebalance = action.message.message_id;
        bot.editMessageText("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'admin' }],
                ]
            })
        });
    } else if (action.data == "faq") {
        bot.editMessageText(config.faq, {
            chat_id: action.message.chat.id, 
            message_id: action.message.message_id,
            parse_mode: "HTML",
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main' }],
                ]
            })
        });
    }
    fs.writeFileSync("./users.json", JSON.stringify(users));
}
);
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")